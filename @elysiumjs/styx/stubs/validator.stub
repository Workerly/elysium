import type { Context } from '@elysiumjs/core';

import { t } from 'elysia';

export class {name} {
    /**
     * The validation schema for the validator.
     *
     * Define here the requirements for the data that needs to be validated.
     *
     * @example
     * ```ts
     * t.Object({
     *     username: t.String(),
     *     password: t.String()
     * })
     * ```
     *
     * If you need to customize the error messages, you can use the `error` property in the schema options:
     *
     * @example
     * ```ts
     * t.Object({
     *     username: t.String({ error: 'Username is required' }),
     *     password: t.String({ error: 'Password is required' })
     * })
     * ```
     *
     * The error property can also be a function that returns a string:
     *
     * @example
     * ```ts
     * t.Object({
     *     username: t.String({ error: ({ errors, type, validation, value }) => 'Username is required' }),
     *     password: t.String({ error: ({ errors, type, validation, value }) => 'Password is required' })
     * })
     */
    public static readonly schema = t.Object({});

    /**
     * Whether the request should be authorized before validation.
     *
     * If the request is not authorized, the validation will be skipped.
     *
     * @param ctx The request context.
     * @returns Whether the request is authorized.
     */
    public static async authorize(ctx: Context<{request_name}>): Promise<boolean> {
        return true;
    }

    /**
     * Processes custom validation logic.
     *
     * This method is called after the validation schema is checked against the input data.
     * So it's safe to assume that the schema is valid.
     *
     * You can use this method to perform any custom validation logic on the request body or
     * query parameters.
     *
     * @param ctx The request context.
     * @returns Whether the input data is valid.
     */
    public static async validate(ctx: Context<{request_name}>): Promise<boolean> {
        return true;
    }
}

export type {request_name} = typeof {name}.schema.static;
